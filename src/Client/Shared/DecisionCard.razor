@using AndNet.Manager.Shared.Models.Documentation.Info.Decision
@inherits AndNet.Manager.Client.Pages.Document
@if (Doc?.Info is Decision decision)
{
    <div class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">
                <a href="document/@Doc.Id.ToString("D")">@Doc.Title</a>
            </h5>
            <div class="d-flex flex-row justify-content-between">
                <div>
                    <InfoBlock Key="Автор" Link="@($"player/{Doc.AuthorId}")" Value="@AuthorNickname"/>
                    <InfoBlock Key="Дата" Value="@Doc.CreationDate.ToShortDateString()"/>
                    <InfoBlock Key="Тип" Value="@DocRules.DocNames[decision.GetType()]"/>
                </div>
                <div>
                    <div class="progress mb-1" role="progressbar">
                        <div class="progress-bar bg-success" style="width: @(decision.YesVotes / (double)decision.Votes.Count * 100d)%">
                            @((decision.YesVotes / (double)decision.Votes.Count).ToString("P0"))
                        </div>
                        <div class="progress-bar bg-danger" style="width: @(decision.NoVotes / (double)decision.Votes.Count * 100d)%">
                            @((decision.NoVotes / (double)decision.Votes.Count).ToString("P0"))
                        </div>
                        <div class="progress-bar bg-info" style="width: @(decision.BlockingVotes / (double)decision.Votes.Count * 100d)%">
                            @((decision.BlockingVotes / (double)decision.Votes.Count).ToString("P0"))
                        </div>
                        <div class="progress-bar bg-warning" style="width: @(decision.Votes.Count(x => x.VoteType is VoteType.Abstain) / (double)decision.Votes.Count * 100d)%">
                            @((decision.Votes.Count(x => x.VoteType is VoteType.Abstain) / (double)decision.Votes.Count).ToString("P0"))
                        </div>
                        <div class="progress-bar bg-secondary" style="width: @(decision.Votes.Count(x => x.VoteType is VoteType.None) / (double)decision.Votes.Count * 100d)%">
                            @((decision.Votes.Count(x => x.VoteType is VoteType.None) / (double)decision.Votes.Count).ToString("P0"))
                        </div>
                    </div>

                    <div class="row mb-1">
                        <div class="col d-flex flex-column align-items-center justify-content-start">
                            <button class="btn btn-outline-primary  m-1" disabled="@(!VoteEnabled)" @onclick="async () => await Vote(VoteType.Yes)">
                                <i class="bi bi-check-circle-fill text-success"></i>
                            </button>
                            <span class="text-success-emphasis text-center">@decision.YesVotes.ToString("D")</span>
                        </div>
                        <div class="col d-flex flex-column align-items-center justify-content-start">
                            <button class="btn btn-outline-primary m-1" disabled="@(!VoteEnabled)" @onclick="async () => await Vote(VoteType.No)">
                                <i class="bi bi-x-circle-fill text-danger"></i>
                            </button>
                            <span class="text-danger-emphasis text-center">@decision.NoVotes.ToString("D")</span>
                        </div>
                        <div class="col d-flex flex-column align-items-center justify-content-start">
                            <button class="btn btn-outline-primary m-1" disabled="@(!VoteEnabled)" @onclick="async () => await Vote(VoteType.NeedMoreInfo)">
                                <i class="bi bi-question-circle-fill text-info"></i>
                            </button>
                            <td class="text-info-emphasis text-center">@decision.BlockingVotes.ToString("D")</td>
                        </div>
                        <div class="col d-flex flex-column align-items-center justify-content-start">
                            <button class="btn btn-outline-primary  m-1" disabled="@(!VoteEnabled)" @onclick="async () => await Vote(VoteType.Abstain)">
                                <i class="bi bi-circle-half text-warning"></i>
                            </button>
                            <td class="text-warning-emphasis text-center">@decision.Votes.Count(x => x.VoteType is VoteType.Abstain).ToString("D")</td>
                        </div>
                        <div class="col d-flex flex-column align-items-center justify-content-start">
                            <button class="btn btn-outline-primary m-1" disabled>
                                <i class="bi bi-circle text-secondary"></i>
                            </button>
                            <td class="text-secondary-emphasis text-center">@decision.Votes.Count(x => x.VoteType is VoteType.None).ToString("D")</td>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}