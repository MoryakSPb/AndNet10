@if (VoteDecision is { Votes.Count: > 0, MinYesVotesPercent: > 0.00 })
{
    <div class="d-flex flex-column justify-content-between mb-2">
        <label class="mb-1">Распределение голосов</label>
        <div class="progress mb-1" role="progressbar">
            <div class="progress-bar bg-success" style="width: @(VoteDecision.YesVotes / (double)VoteDecision.Votes.Count * 100d)%">
                @((VoteDecision.YesVotes / (double)VoteDecision.Votes.Count).ToString("P0"))
            </div>
            <div class="progress-bar bg-danger" style="width: @(VoteDecision.NoVotes / (double)VoteDecision.Votes.Count * 100d)%">
                @((VoteDecision.NoVotes / (double)VoteDecision.Votes.Count).ToString("P0"))
            </div>
            <div class="progress-bar bg-info" style="width: @(VoteDecision.BlockingVotes / (double)VoteDecision.Votes.Count * 100d)%">
                @((VoteDecision.BlockingVotes / (double)VoteDecision.Votes.Count).ToString("P0"))
            </div>
            <div class="progress-bar bg-warning" style="width: @(VoteDecision.Votes.Count(x => x.VoteType is VoteType.Abstain) / (double)VoteDecision.Votes.Count * 100d)%">
                @((VoteDecision.Votes.Count(x => x.VoteType is VoteType.Abstain) / (double)VoteDecision.Votes.Count).ToString("P0"))
            </div>
            <div class="progress-bar bg-secondary" style="width: @(VoteDecision.Votes.Count(x => x.VoteType is VoteType.None) / (double)VoteDecision.Votes.Count * 100d)%">
                @((VoteDecision.Votes.Count(x => x.VoteType is VoteType.None) / (double)VoteDecision.Votes.Count).ToString("P0"))
            </div>
        </div>

        <div class="row mb-2">
            <div class="col d-flex flex-column align-items-center justify-content-start">
                <button class="btn btn-outline-primary  my-1"
                        disabled="@(!VoteEnabled || VoteDecision.Votes.Any(x => x.PlayerId == MeId && x.VoteType == VoteType.Yes))"
                        @onclick="async () => await Vote(VoteType.Yes)"
                        title="@DocRules.VoteNames[VoteType.Yes]">
                    <i class="bi bi-check-circle-fill text-success"></i>
                </button>
                <span class="text-success-emphasis text-center">@VoteDecision.YesVotes.ToString("D")</span>
            </div>
            <div class="col d-flex flex-column align-items-center justify-content-start">
                <button class="btn btn-outline-primary my-1"
                        disabled="@(!VoteEnabled || VoteDecision.Votes.Any(x => x.PlayerId == MeId && x.VoteType == VoteType.No))"
                        @onclick="async () => await Vote(VoteType.No)"
                        title="@DocRules.VoteNames[VoteType.No]">
                    <i class="bi bi-x-circle-fill text-danger"></i>
                </button>
                <span class="text-danger-emphasis text-center">@VoteDecision.NoVotes.ToString("D")</span>
            </div>
            <div class="col d-flex flex-column align-items-center justify-content-start">
                <button class="btn btn-outline-primary my-1"
                        disabled="@(!VoteEnabled || VoteDecision.Votes.Any(x => x.PlayerId == MeId && x.VoteType == VoteType.NeedMoreInfo))"
                        @onclick="async () => await Vote(VoteType.NeedMoreInfo)"
                        title="@DocRules.VoteNames[VoteType.NeedMoreInfo]">
                    <i class="bi bi-question-circle-fill text-info"></i>
                </button>
                <span class="text-info-emphasis text-center">@VoteDecision.BlockingVotes.ToString("D")</span>
            </div>
            <div class="col d-flex flex-column align-items-center justify-content-start">
                <button class="btn btn-outline-primary  my-1"
                        disabled="@(!VoteEnabled || VoteDecision.Votes.Any(x => x.PlayerId == MeId && x.VoteType == VoteType.Abstain))"
                        @onclick="async () => await Vote(VoteType.Abstain)"
                        title="@DocRules.VoteNames[VoteType.Abstain]">
                    <i class="bi bi-circle-half text-warning"></i>
                </button>
                <span class="text-warning-emphasis text-center">@VoteDecision.Votes.Count(x => x.VoteType is VoteType.Abstain).ToString("D")</span>
            </div>
            <div class="col d-flex flex-column align-items-center justify-content-start">
                <button class="btn btn-outline-primary my-1" disabled title="@DocRules.VoteNames[VoteType.None]">
                    <i class="bi bi-circle text-secondary"></i>
                </button>
                <span class="text-secondary-emphasis text-center">@VoteDecision.Votes.Count(x => x.VoteType is VoteType.None).ToString("D")</span>
            </div>
        </div>
        @if (IsAdvisor && VoteDecision.IsExecuted is null)
        {
            <div class="d-grid gap-2">
                @if (ExecuteSupported)
                {
                    <button class="btn btn-success btn-sm" type="button"
                            disabled="@(!VoteDecision.IsAgreeAvailable)"
                            @onclick="async () => await Execute(true)">
                        Исполнить
                    </button>
                }
                else
                {
                    <button class="btn btn-info btn-sm" type="button"
                            disabled="@(!VoteDecision.IsAgreeAvailable)"
                            @onclick="async () => await Execute(true)">
                        Отметить как исполненное
                    </button>
                }

                <button class="btn btn-danger btn-sm" type="button" disabled="@(!VoteDecision.IsDeclineAvailable)"
                        @onclick="async () => await Execute(false)">
                    Отклонить
                </button>
            </div>
        }
    </div>
}