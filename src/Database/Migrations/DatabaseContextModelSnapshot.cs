// <auto-generated />
using System;
using System.Collections.Generic;
using System.Net;
using AndNet.Manager.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace AndNet.Manager.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("AndNet")
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "AndNet", "rum");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AndNet.Manager.Database.Models.Auth.DbUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "AndNet");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.DbAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AutomationId")
                        .HasColumnType("integer");

                    b.Property<int>("AwardSheetId")
                        .HasColumnType("integer");

                    b.Property<int>("AwardType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsMarkedForDelete")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IssuerId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AutomationId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AutomationId"), "Hash");

                    b.HasIndex("AwardSheetId")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AwardSheetId"), "Btree");

                    b.HasIndex("AwardType");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AwardType"), "Btree");

                    b.HasIndex("IsMarkedForDelete");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("IsMarkedForDelete"), "Hash");

                    b.HasIndex("IssuerId");

                    b.HasIndex("PlayerId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PlayerId"), "Hash");

                    b.HasIndex("PlayerId", "AutomationId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PlayerId", "AutomationId"), "BTree");

                    b.ToTable("Awards", "AndNet");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.DbExpedition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountablePlayerId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DiscordRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<NpgsqlRange<DateTime>>("During")
                        .HasColumnType("tsrange");

                    b.Property<bool>("IsMarkedForDelete")
                        .HasColumnType("boolean");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AccountablePlayerId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AccountablePlayerId"), "Hash");

                    b.HasIndex("DiscordRoleId")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("DiscordRoleId"), "Btree");

                    b.HasIndex("During");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("During"), "GiST");

                    b.HasIndex("IsMarkedForDelete");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("IsMarkedForDelete"), "Hash");

                    b.ToTable("Expeditions", "AndNet");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.DbPlayerContact", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<bool>("IsMarkedForDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("PlayerId", "Type");

                    b.HasIndex("IsMarkedForDelete");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("IsMarkedForDelete"), "Hash");

                    b.HasIndex("PlayerId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PlayerId"), "Hash");

                    b.HasIndex("Type");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Type"), "Hash");

                    b.ToTable("DbPlayerContact", "AndNet");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.DbDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("C");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "russian")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Body" });

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasAlternateKey("CreationDate");

                    b.HasIndex("CreatorId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("CreatorId"), "Hash");

                    b.HasIndex("ParentId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ParentId"), "Hash");

                    b.HasIndex("Prefix");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Prefix"), "Hash");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "RUM");

                    b.ToTable("Documents", "AndNet");

                    b.HasDiscriminator<string>("Prefix").HasValue("");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Utility.DbVote", b =>
                {
                    b.Property<int>("DecisionId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VoteType")
                        .HasColumnType("integer");

                    b.HasKey("DecisionId", "PlayerId");

                    b.HasIndex("DecisionId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("DecisionId"), "Hash");

                    b.HasIndex("PlayerId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PlayerId"), "Hash");

                    b.HasIndex("VoteType");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("VoteType"), "Hash");

                    b.ToTable("DbVote", "AndNet");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Report.Utility.DbBattleCombatant", b =>
                {
                    b.Property<int>("BattleId")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<List<string>>("Casualties")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int?>("CommanderId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Units")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("UnknownPlayers")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("BattleId", "Number");

                    b.HasIndex("BattleId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("BattleId"), "Hash");

                    b.HasIndex("Casualties");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Casualties"), "GIN");

                    b.HasIndex("CommanderId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("CommanderId"), "Hash");

                    b.HasIndex("Name");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Name"), "BTree");

                    b.HasIndex("Tag");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Tag"), "BTree");

                    b.HasIndex("Units");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Units"), "GIN");

                    b.HasIndex("UnknownPlayers");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("UnknownPlayers"), "GIN");

                    b.ToTable("DbBattleCombatant", "AndNet");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Player.DbPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DetectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int?>("IdentityId")
                        .HasColumnType("integer");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RealName")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal?>("SteamId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasAlternateKey("Nickname");

                    b.HasIndex("DiscordId")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("DiscordId"), "Btree");

                    b.HasIndex("IdentityId")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("IdentityId"), "Btree");

                    b.HasIndex("SteamId")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SteamId"), "Btree");

                    b.HasIndex("TimeZone");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("TimeZone"), "Hash");

                    b.ToTable("Players", "AndNet");

                    b.HasDiscriminator<int>("Status");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DbBattleCombatantDbPlayer", b =>
                {
                    b.Property<int>("PlayersId")
                        .HasColumnType("integer");

                    b.Property<int>("BattleCombatantsMemberBattleId")
                        .HasColumnType("integer");

                    b.Property<int>("BattleCombatantsMemberNumber")
                        .HasColumnType("integer");

                    b.HasKey("PlayersId", "BattleCombatantsMemberBattleId", "BattleCombatantsMemberNumber");

                    b.HasIndex("BattleCombatantsMemberBattleId", "BattleCombatantsMemberNumber");

                    b.ToTable("DbBattleCombatantDbPlayer", "AndNet");
                });

            modelBuilder.Entity("DbDocumentDecisionCouncilExpeditionCreateDbPlayer", b =>
                {
                    b.Property<int>("DbDocumentDecisionCouncilExpeditionCreateId")
                        .HasColumnType("integer");

                    b.Property<int>("MembersId")
                        .HasColumnType("integer");

                    b.HasKey("DbDocumentDecisionCouncilExpeditionCreateId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("DbDocumentDecisionCouncilExpeditionCreateDbPlayer", "AndNet");
                });

            modelBuilder.Entity("DbDocumentProtocolDbPlayer", b =>
                {
                    b.Property<int>("MembersId")
                        .HasColumnType("integer");

                    b.Property<int>("RelatedProtocolsId")
                        .HasColumnType("integer");

                    b.HasKey("MembersId", "RelatedProtocolsId");

                    b.HasIndex("RelatedProtocolsId");

                    b.ToTable("DbDocumentProtocolDbPlayer", "AndNet");
                });

            modelBuilder.Entity("DbExpeditionDbPlayer", b =>
                {
                    b.Property<int>("ExpeditionsId")
                        .HasColumnType("integer");

                    b.Property<int>("MembersId")
                        .HasColumnType("integer");

                    b.HasKey("ExpeditionsId", "MembersId");

                    b.HasIndex("ExpeditionsId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ExpeditionsId"), "Hash");

                    b.HasIndex("MembersId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("MembersId"), "Hash");

                    b.ToTable("ExpeditionsPlayers", "AndNet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "AndNet");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ConcurrencyStamp = "757dc6530e744053874ea3b66d54b90a",
                            Name = "first_advisor",
                            NormalizedName = "FIRST_ADVISOR"
                        },
                        new
                        {
                            Id = -2,
                            ConcurrencyStamp = "3a160416081c4744840bd246115d39b8",
                            Name = "advisor",
                            NormalizedName = "ADVISOR"
                        },
                        new
                        {
                            Id = -3,
                            ConcurrencyStamp = "b1debd2c3d2c4214a1ace0d9ddba5dff",
                            Name = "member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "AndNet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "AndNet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "AndNet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "AndNet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "AndNet");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.DbDocumentDirective", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.DbDocument");

                    b.Property<DateTime?>("AcceptanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ReplacedById")
                        .HasColumnType("integer");

                    b.HasIndex("AcceptanceDate");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AcceptanceDate"), "BTree");

                    b.HasIndex("CancelDate")
                        .IsDescending();

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("CancelDate"), "BTree");

                    b.HasIndex("ReplacedById");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ReplacedById"), "Hash");

                    b.HasDiscriminator().HasValue("Д");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.DbDocumentProtocol", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.DbDocument");

                    b.Property<int>("ProtocolType")
                        .HasColumnType("integer");

                    b.HasIndex("ProtocolType");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ProtocolType"), "Hash");

                    b.HasDiscriminator().HasValue("П");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.DbDocumentDecision", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.DbDocument");

                    b.Property<DateTime?>("ExecuteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ExecutorId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsExecuted")
                        .HasColumnType("boolean");

                    b.Property<double>("MinYesVotesPercent")
                        .HasColumnType("double precision");

                    b.HasIndex("ExecuteDate");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ExecuteDate"), "BTree");

                    b.HasIndex("ExecutorId");

                    b.HasDiscriminator().HasValue("Р");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Report.DbDocumentReport", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.DbDocument");

                    b.Property<NpgsqlRange<DateTime>>("ReportRange")
                        .HasColumnType("tsrange");

                    b.HasIndex("ReportRange");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ReportRange"), "GiST");

                    b.HasDiscriminator().HasValue("О");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Player.DbClanPlayer", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Player.DbPlayer");

                    b.Property<DateTime>("JoinDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("JoinDate");

                    b.Property<bool>("OnReserve")
                        .HasColumnType("boolean");

                    b.Property<short>("Rank")
                        .HasColumnType("smallint");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.HasIndex("OnReserve");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("OnReserve"), "Hash");

                    b.HasIndex("Rank");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Rank"), "Btree");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Player.DbExternalPlayer", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Player.DbPlayer");

                    b.Property<short>("Relationship")
                        .HasColumnType("smallint");

                    b.HasIndex("Relationship");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Relationship"), "Btree");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.DbDocumentDecisionCouncil", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.DbDocumentDecision");

                    b.HasDiscriminator().HasValue("РС");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.DbDocumentDecisionGeneralMeeting", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.DbDocumentDecision");

                    b.HasDiscriminator().HasValue("РО");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Report.DbDocumentReportBattle", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Report.DbDocumentReport");

                    b.Property<ValueTuple<IPAddress, int>?>("ServerEndPoint")
                        .HasColumnType("cidr");

                    b.HasIndex("ServerEndPoint");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ServerEndPoint"), "GiST");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("ServerEndPoint"), new[] { "inet_ops" });

                    b.HasDiscriminator().HasValue("ОС");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Report.DbDocumentReportExpedition", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Report.DbDocumentReport");

                    b.Property<int>("ExpeditionId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("ExpeditionId");

                    b.HasIndex("ExpeditionId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ExpeditionId"), "Hash");

                    b.HasDiscriminator().HasValue("ОЭ");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Player.DbFormerClanPlayer", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Player.DbExternalPlayer");

                    b.Property<DateTime>("JoinDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("JoinDate");

                    b.Property<DateTime>("LeaveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LeaveReason")
                        .HasColumnType("integer");

                    b.Property<bool>("RestorationAvailable")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue(-1);
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.DbDocumentDecisionCouncilGeneralMeetingInit", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.DbDocumentDecisionCouncil");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasIndex("Date")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Date"), "BTree");

                    b.HasDiscriminator().HasValue("РСОС");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Directive.DbDocumentDecisionCouncilDirective", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.DbDocumentDecisionCouncil");

                    b.Property<int>("DirectiveId")
                        .HasColumnType("integer")
                        .HasColumnName("DirectiveId");

                    b.HasIndex("DirectiveId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("DirectiveId"), "Hash");

                    b.HasDiscriminator().HasValue("РСД");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Expedition.DbDocumentDecisionCouncilExpedition", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.DbDocumentDecisionCouncil");

                    b.Property<int>("ExpeditionId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("ExpeditionId");

                    b.HasIndex("ExpeditionId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ExpeditionId"), "Hash");

                    b.HasDiscriminator().HasValue("РСЭ");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Player.DbDocumentDecisionCouncilPlayer", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.DbDocumentDecisionCouncil");

                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("PlayerId");

                    b.HasIndex("PlayerId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PlayerId"), "Hash");

                    b.HasDiscriminator().HasValue("РСИ");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Directive.DbDocumentDecisionCouncilDirectiveAccept", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.Directive.DbDocumentDecisionCouncilDirective");

                    b.HasDiscriminator().HasValue("РСДП");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Directive.DbDocumentDecisionCouncilDirectiveCancel", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.Directive.DbDocumentDecisionCouncilDirective");

                    b.HasDiscriminator().HasValue("РСДО");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Directive.DbDocumentDecisionCouncilDirectiveChange", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.Directive.DbDocumentDecisionCouncilDirective");

                    b.Property<int>("NewDirectiveId")
                        .HasColumnType("integer");

                    b.HasIndex("NewDirectiveId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("NewDirectiveId"), "Hash");

                    b.HasDiscriminator().HasValue("РСДЗ");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Expedition.DbDocumentDecisionCouncilExpeditionAddPlayer", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.Expedition.DbDocumentDecisionCouncilExpedition");

                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("PlayerId");

                    b.HasIndex("PlayerId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PlayerId"), "Hash");

                    b.HasDiscriminator().HasValue("РСЭД");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Expedition.DbDocumentDecisionCouncilExpeditionChangeAccountable", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.Expedition.DbDocumentDecisionCouncilExpedition");

                    b.Property<int>("AccountablePlayerId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("PlayerId");

                    b.HasIndex("AccountablePlayerId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AccountablePlayerId"), "Hash");

                    b.HasDiscriminator().HasValue("РСЭК");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Expedition.DbDocumentDecisionCouncilExpeditionClose", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.Expedition.DbDocumentDecisionCouncilExpedition");

                    b.HasDiscriminator().HasValue("РСЭЗ");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Expedition.DbDocumentDecisionCouncilExpeditionCreate", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.Expedition.DbDocumentDecisionCouncilExpedition");

                    b.Property<int>("AccountablePlayerId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("PlayerId");

                    b.Property<TimeSpan>("Duration")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("interval")
                        .HasColumnName("Duration");

                    b.HasIndex("AccountablePlayerId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AccountablePlayerId"), "Hash");

                    b.HasDiscriminator().HasValue("РСЭС");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Expedition.DbDocumentDecisionCouncilExpeditionProlongation", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.Expedition.DbDocumentDecisionCouncilExpedition");

                    b.Property<TimeSpan>("ProlongationTime")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("interval")
                        .HasColumnName("Duration");

                    b.HasDiscriminator().HasValue("РСЭП");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Expedition.DbDocumentDecisionCouncilExpeditionRemovePlayer", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.Expedition.DbDocumentDecisionCouncilExpedition");

                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("PlayerId");

                    b.HasIndex("PlayerId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PlayerId"), "Hash");

                    b.HasDiscriminator().HasValue("РСЭИ");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Player.DbDocumentDecisionCouncilPlayerAcceptApplication", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.Player.DbDocumentDecisionCouncilPlayer");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<float?>("Hours")
                        .HasColumnType("real");

                    b.Property<string>("Recommendation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("РСИО");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Player.DbDocumentDecisionCouncilPlayerAwardSheet", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.Player.DbDocumentDecisionCouncilPlayer");

                    b.Property<int>("AwardType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("РСИН");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Player.DbDocumentDecisionCouncilPlayerFromReserve", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.Player.DbDocumentDecisionCouncilPlayer");

                    b.HasDiscriminator().HasValue("РСИВ");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Player.DbDocumentDecisionCouncilPlayerKick", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.Player.DbDocumentDecisionCouncilPlayer");

                    b.Property<int>("PlayerLeaveReason")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("РСИИ");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Player.DbDocumentDecisionCouncilPlayerRehabilitation", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.Player.DbDocumentDecisionCouncilPlayer");

                    b.HasDiscriminator().HasValue("РСИП");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Player.DbDocumentDecisionCouncilPlayerToReserve", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Documentation.Decisions.Player.DbDocumentDecisionCouncilPlayer");

                    b.HasDiscriminator().HasValue("РСИР");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.DbAward", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Documentation.Decisions.Player.DbDocumentDecisionCouncilPlayerAwardSheet", "AwardSheet")
                        .WithOne("Award")
                        .HasForeignKey("AndNet.Manager.Database.Models.DbAward", "AwardSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "Issuer")
                        .WithMany("IssuedAwards")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "Player")
                        .WithMany("Awards")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AwardSheet");

                    b.Navigation("Issuer");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.DbExpedition", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "AccountablePlayer")
                        .WithMany("AccountableExpeditions")
                        .HasForeignKey("AccountablePlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountablePlayer");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.DbPlayerContact", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "Player")
                        .WithMany("Contacts")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.DbDocument", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "Creator")
                        .WithMany("CreatedDocuments")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNet.Manager.Database.Models.Documentation.DbDocument", "Parent")
                        .WithMany("ChildrenDocuments")
                        .HasForeignKey("ParentId");

                    b.Navigation("Creator");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Utility.DbVote", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Documentation.Decisions.DbDocumentDecision", "Decision")
                        .WithMany("Votes")
                        .HasForeignKey("DecisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "Player")
                        .WithMany("Votes")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Decision");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Report.Utility.DbBattleCombatant", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Documentation.Report.DbDocumentReportBattle", "Battle")
                        .WithMany("Combatants")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "Commander")
                        .WithMany("BattleCombatantsCommander")
                        .HasForeignKey("CommanderId");

                    b.Navigation("Battle");

                    b.Navigation("Commander");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Player.DbPlayer", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Auth.DbUser", "Identity")
                        .WithOne("Player")
                        .HasForeignKey("AndNet.Manager.Database.Models.Player.DbPlayer", "IdentityId");

                    b.Navigation("Identity");
                });

            modelBuilder.Entity("DbBattleCombatantDbPlayer", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNet.Manager.Database.Models.Documentation.Report.Utility.DbBattleCombatant", null)
                        .WithMany()
                        .HasForeignKey("BattleCombatantsMemberBattleId", "BattleCombatantsMemberNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbDocumentDecisionCouncilExpeditionCreateDbPlayer", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Documentation.Decisions.Expedition.DbDocumentDecisionCouncilExpeditionCreate", null)
                        .WithMany()
                        .HasForeignKey("DbDocumentDecisionCouncilExpeditionCreateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbDocumentProtocolDbPlayer", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNet.Manager.Database.Models.Documentation.DbDocumentProtocol", null)
                        .WithMany()
                        .HasForeignKey("RelatedProtocolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbExpeditionDbPlayer", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.DbExpedition", null)
                        .WithMany()
                        .HasForeignKey("ExpeditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Auth.DbUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Auth.DbUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNet.Manager.Database.Models.Auth.DbUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Auth.DbUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.DbDocumentDirective", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Documentation.DbDocumentDirective", "ReplacedBy")
                        .WithMany("Previous")
                        .HasForeignKey("ReplacedById");

                    b.Navigation("ReplacedBy");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.DbDocumentDecision", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "Executor")
                        .WithMany("ExecutedDecisions")
                        .HasForeignKey("ExecutorId");

                    b.Navigation("Executor");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Report.DbDocumentReportExpedition", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.DbExpedition", "Expedition")
                        .WithMany("Reports")
                        .HasForeignKey("ExpeditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expedition");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Directive.DbDocumentDecisionCouncilDirective", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Documentation.DbDocumentDirective", "Directive")
                        .WithMany("Directives")
                        .HasForeignKey("DirectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Directive");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Expedition.DbDocumentDecisionCouncilExpedition", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.DbExpedition", "Expedition")
                        .WithMany("CouncilPlayerDirectives")
                        .HasForeignKey("ExpeditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expedition");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Player.DbDocumentDecisionCouncilPlayer", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "Player")
                        .WithMany("CouncilPlayerDirectives")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Directive.DbDocumentDecisionCouncilDirectiveChange", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Documentation.DbDocumentDirective", "NewDirective")
                        .WithMany("ChangeToDirectives")
                        .HasForeignKey("NewDirectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewDirective");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Expedition.DbDocumentDecisionCouncilExpeditionAddPlayer", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Expedition.DbDocumentDecisionCouncilExpeditionChangeAccountable", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "AccountablePlayer")
                        .WithMany()
                        .HasForeignKey("AccountablePlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountablePlayer");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Expedition.DbDocumentDecisionCouncilExpeditionCreate", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "AccountablePlayer")
                        .WithMany()
                        .HasForeignKey("AccountablePlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountablePlayer");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Expedition.DbDocumentDecisionCouncilExpeditionRemovePlayer", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Auth.DbUser", b =>
                {
                    b.Navigation("Player")
                        .IsRequired();
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.DbExpedition", b =>
                {
                    b.Navigation("CouncilPlayerDirectives");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.DbDocument", b =>
                {
                    b.Navigation("ChildrenDocuments");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Player.DbPlayer", b =>
                {
                    b.Navigation("AccountableExpeditions");

                    b.Navigation("Awards");

                    b.Navigation("BattleCombatantsCommander");

                    b.Navigation("Contacts");

                    b.Navigation("CouncilPlayerDirectives");

                    b.Navigation("CreatedDocuments");

                    b.Navigation("ExecutedDecisions");

                    b.Navigation("IssuedAwards");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.DbDocumentDirective", b =>
                {
                    b.Navigation("ChangeToDirectives");

                    b.Navigation("Directives");

                    b.Navigation("Previous");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.DbDocumentDecision", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Report.DbDocumentReportBattle", b =>
                {
                    b.Navigation("Combatants");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Documentation.Decisions.Player.DbDocumentDecisionCouncilPlayerAwardSheet", b =>
                {
                    b.Navigation("Award");
                });
#pragma warning restore 612, 618
        }
    }
}
