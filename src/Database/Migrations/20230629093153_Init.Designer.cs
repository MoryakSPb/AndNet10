// <auto-generated />
using System;
using AndNet.Manager.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace AndNet.Manager.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230629093153_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("AndNet")
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "AndNet", "rum");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AndNet.Manager.Database.Models.Auth.DbUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "AndNet");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.DbAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AutomationId")
                        .HasColumnType("integer");

                    b.Property<int>("AwardSheetId")
                        .HasColumnType("integer");

                    b.Property<short>("AwardType")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsMarkedForDelete")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("IssuerId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AutomationId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AutomationId"), "Hash");

                    b.HasIndex("AwardSheetId")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AwardSheetId"), "Btree");

                    b.HasIndex("AwardType");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AwardType"), "Btree");

                    b.HasIndex("IsMarkedForDelete");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("IsMarkedForDelete"), "Hash");

                    b.HasIndex("IssuerId");

                    b.HasIndex("PlayerId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PlayerId"), "Hash");

                    b.HasIndex("PlayerId", "AutomationId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PlayerId", "AutomationId"), "BTree");

                    b.ToTable("Awards", "AndNet");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.DbDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Info")
                        .HasColumnType("jsonb")
                        .HasColumnName("Info");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int>("Views")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AuthorId"), "Hash");

                    b.HasIndex("CreationDate");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("CreationDate"), "BTree");

                    b.HasIndex("Info");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Info"), "GIN");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Info"), new[] { "jsonb_path_ops" });

                    b.HasIndex("ParentId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ParentId"), "Hash");

                    b.ToTable("Documents", "AndNet");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.DbDocBody", b =>
                {
                    b.Property<int>("DocId")
                        .HasColumnType("integer");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Npgsql:Compression:", "pglz");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "russian")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Body" });

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("DocId");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "RUM");

                    b.ToTable("DocumentBodies", "AndNet");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.DbExpedition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountablePlayerId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DiscordRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<NpgsqlRange<DateTime>>("During")
                        .HasColumnType("tstzrange");

                    b.Property<bool>("IsMarkedForDelete")
                        .HasColumnType("boolean");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AccountablePlayerId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AccountablePlayerId"), "Hash");

                    b.HasIndex("DiscordRoleId")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("DiscordRoleId"), "Btree");

                    b.HasIndex("During");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("During"), "GiST");

                    b.HasIndex("IsMarkedForDelete");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("IsMarkedForDelete"), "Hash");

                    b.ToTable("Expeditions", "AndNet");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.DbPlayerContact", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<bool>("IsMarkedForDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("PlayerId", "Type");

                    b.HasIndex("IsMarkedForDelete");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("IsMarkedForDelete"), "Hash");

                    b.HasIndex("PlayerId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PlayerId"), "Hash");

                    b.HasIndex("Type");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Type"), "Hash");

                    b.ToTable("PlayerContacts", "AndNet");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.DbPlayerStat", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("PlayerId", "Date");

                    b.HasIndex("Date");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Date"), "BRIN");

                    b.HasIndex("PlayerId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PlayerId"), "Hash");

                    b.ToTable("PlayerStats", "AndNet");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Election.DbElection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CouncilCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ElectionEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Stage")
                        .HasColumnType("smallint");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Stage");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Stage"), "Hash");

                    b.ToTable("Elections", "AndNet");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CouncilCapacity = 0,
                            ElectionEnd = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Stage = (byte)0,
                            Version = 0u
                        });
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Election.DbElectionCandidate", b =>
                {
                    b.Property<int>("ElectionId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsWinner")
                        .HasColumnType("boolean");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("ElectionId", "PlayerId");

                    b.HasIndex("ElectionId")
                        .IsDescending();

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ElectionId"), "Hash");

                    b.HasIndex("PlayerId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PlayerId"), "Hash");

                    b.ToTable("ElectionsCandidates", "AndNet");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Election.DbElectionVoter", b =>
                {
                    b.Property<int>("ElectionId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("VoteDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ElectionId", "PlayerId");

                    b.HasIndex("ElectionId")
                        .IsDescending();

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ElectionId"), "Hash");

                    b.HasIndex("PlayerId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PlayerId"), "Hash");

                    b.ToTable("ElectionsVoters", "AndNet");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Player.DbPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DetectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int?>("IdentityId")
                        .HasColumnType("integer");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RealName")
                        .HasColumnType("text");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("SteamId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("DiscordId")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("DiscordId"), "Btree");

                    b.HasIndex("IdentityId")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("IdentityId"), "Btree");

                    b.HasIndex("Nickname")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Nickname"), "Btree");

                    b.HasIndex("SteamId")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SteamId"), "Btree");

                    b.HasIndex("TimeZone");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("TimeZone"), "Hash");

                    b.ToTable("Players", "AndNet");

                    b.HasDiscriminator<short>("Status");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DbExpeditionDbPlayer", b =>
                {
                    b.Property<int>("ExpeditionsId")
                        .HasColumnType("integer");

                    b.Property<int>("MembersId")
                        .HasColumnType("integer");

                    b.HasKey("ExpeditionsId", "MembersId");

                    b.HasIndex("ExpeditionsId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ExpeditionsId"), "Hash");

                    b.HasIndex("MembersId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("MembersId"), "Hash");

                    b.ToTable("ExpeditionsPlayers", "AndNet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "AndNet");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ConcurrencyStamp = "757dc6530e744053874ea3b66d54b90a",
                            Name = "first_advisor",
                            NormalizedName = "FIRST_ADVISOR"
                        },
                        new
                        {
                            Id = -2,
                            ConcurrencyStamp = "3a160416081c4744840bd246115d39b8",
                            Name = "advisor",
                            NormalizedName = "ADVISOR"
                        },
                        new
                        {
                            Id = -3,
                            ConcurrencyStamp = "b1debd2c3d2c4214a1ace0d9ddba5dff",
                            Name = "member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "AndNet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "AndNet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "AndNet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "AndNet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "AndNet");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Player.DbClanPlayer", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Player.DbPlayer");

                    b.Property<DateTime>("JoinDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("JoinDate");

                    b.Property<bool>("OnReserve")
                        .HasColumnType("boolean");

                    b.Property<short>("Rank")
                        .HasColumnType("smallint");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.HasIndex("OnReserve");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("OnReserve"), "Hash");

                    b.HasIndex("Rank");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Rank"), "Btree");

                    b.HasDiscriminator().HasValue((short)1);
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Player.DbExternalPlayer", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Player.DbPlayer");

                    b.Property<short>("Relationship")
                        .HasColumnType("smallint");

                    b.HasIndex("Relationship");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Relationship"), "Btree");

                    b.HasDiscriminator().HasValue((short)0);
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Player.DbFormerClanPlayer", b =>
                {
                    b.HasBaseType("AndNet.Manager.Database.Models.Player.DbExternalPlayer");

                    b.Property<DateTime>("JoinDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("JoinDate");

                    b.Property<DateTime>("LeaveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("LeaveReason")
                        .HasColumnType("smallint");

                    b.Property<bool>("RestorationAvailable")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue((short)-1);
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.DbAward", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.DbDoc", "AwardSheet")
                        .WithOne()
                        .HasForeignKey("AndNet.Manager.Database.Models.DbAward", "AwardSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "Issuer")
                        .WithMany("IssuedAwards")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "Player")
                        .WithMany("Awards")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AwardSheet");

                    b.Navigation("Issuer");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.DbDoc", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "Author")
                        .WithMany("CreatedDocuments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AndNet.Manager.Database.Models.DbDoc", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.DbDocBody", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.DbDoc", "Doc")
                        .WithOne("Body")
                        .HasForeignKey("AndNet.Manager.Database.Models.DbDocBody", "DocId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doc");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.DbExpedition", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "AccountablePlayer")
                        .WithMany("AccountableExpeditions")
                        .HasForeignKey("AccountablePlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountablePlayer");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.DbPlayerContact", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "Player")
                        .WithMany("Contacts")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.DbPlayerStat", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Election.DbElectionCandidate", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Election.DbElection", "Election")
                        .WithMany("ElectionCandidates")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Election");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Election.DbElectionVoter", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Election.DbElection", "Election")
                        .WithMany("Voters")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Election");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Player.DbPlayer", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Auth.DbUser", "Identity")
                        .WithOne("Player")
                        .HasForeignKey("AndNet.Manager.Database.Models.Player.DbPlayer", "IdentityId");

                    b.Navigation("Identity");
                });

            modelBuilder.Entity("DbExpeditionDbPlayer", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.DbExpedition", null)
                        .WithMany()
                        .HasForeignKey("ExpeditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNet.Manager.Database.Models.Player.DbPlayer", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Auth.DbUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Auth.DbUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNet.Manager.Database.Models.Auth.DbUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AndNet.Manager.Database.Models.Auth.DbUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Auth.DbUser", b =>
                {
                    b.Navigation("Player")
                        .IsRequired();
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.DbDoc", b =>
                {
                    b.Navigation("Body");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Election.DbElection", b =>
                {
                    b.Navigation("ElectionCandidates");

                    b.Navigation("Voters");
                });

            modelBuilder.Entity("AndNet.Manager.Database.Models.Player.DbPlayer", b =>
                {
                    b.Navigation("AccountableExpeditions");

                    b.Navigation("Awards");

                    b.Navigation("Contacts");

                    b.Navigation("CreatedDocuments");

                    b.Navigation("IssuedAwards");
                });
#pragma warning restore 612, 618
        }
    }
}
